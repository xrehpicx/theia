{"version":3,"sources":["components/ControlPannel/Controller.js","contexts/AuthContext.jsx","components/ControlPannel/ControlPannel.jsx","components/ControlPannel/Login.jsx","App.js","serviceWorker.js","index.js"],"names":["setTheia","AuthContext","createContext","AuthProvider","children","authState","useState","theiaState","Provider","value","socket","socketIOClient","window","location","camsocket","controllers","remote","left","right","x","rad","pRad","emit","y","speed","pSpeed","on","img","document","querySelector","getimg","greenlet","buffer","binary","bytes","Uint8Array","len","byteLength","i","String","fromCharCode","btoa","then","data","setAttribute","console","log","d","Boolean","Number","THEIA","setup","init","root","optionsleft","zone","mode","position","top","color","size","lockY","leftmanager","nipplejs","create","e","Math","floor","vector","setupLeftNipple","optionsright","lockX","rightmanager","setupRightNipple","maxxspeed","addEventListener","event","keyCode","shiftKey","wasdf","this","Controller","useContext","auth","theia","useEffect","rem","className","style","display","alt","ControlPannel","setAuth","full","setFull","enabled","onChange","onClick","Login","pwd","transform","opacity","checker","setTimeout","styel","width","onSubmit","preventDefault","target","autoComplete","required","type","height","paddingRight","paddingLeft","App","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4b176c41.chunk.js","sourcesContent":["import React, { useEffect, useContext } from 'react';\n\nimport nipplejs from 'nipplejs';\nimport socketIOClient from \"socket.io-client\";\nimport { AuthContext } from '../../contexts/AuthContext'\n\nimport greenlet from 'greenlet'\n/* const socket = socketIOClient('http://localhost:8000/client'); */\n\nconst socket = socketIOClient(window.location + 'client');\nconst camsocket = socketIOClient(window.location + 'cam');\nlet setTheia;\nconst controllers = {};\n\n\n\n\n\nconst remote = function (left, right) {\n    camsocket.on('connect', () => {\n        let img = document.querySelector('.feed');\n        function _arrayBufferToBase64(buffer) {\n            var binary = '';\n            var bytes = new Uint8Array(buffer);\n            var len = bytes.byteLength;\n            for (var i = 0; i < len; i++) {\n                binary += String.fromCharCode(bytes[i]);\n            }\n            return btoa(binary);\n        }\n        const getimg = greenlet(_arrayBufferToBase64);\n        camsocket.on('camclient', (i) => {\n            getimg(i).then(data => {\n                img.setAttribute(\n                    'src', 'data:image/jpeg;base64,' + data\n                );\n            })\n\n        })\n    })\n\n    socket.on('connect', () => console.log('connected'));\n    socket.on('theia-state', (d) => {\n        console.log((Boolean(Number(d))));\n        window.THEIA = (Boolean(Number(d)));\n        try {\n            setTheia(Boolean(Number(d)));\n        } catch  { }\n    })\n\n    function x(rad) {\n        let pRad = 0;\n        if (pRad !== rad) {\n            socket.emit('x', rad);\n            pRad = rad;\n        }\n    }\n    function y(speed) {\n        let pSpeed = 0;\n        if (pSpeed !== speed) {\n            socket.emit('y', speed);\n            pSpeed = speed;\n        }\n    }\n    function setupLeftNipple(root) {\n        const optionsleft = {\n            zone: root || document.querySelector('.left'),\n            mode: 'dynamic',\n            position: { left: '25%', top: '50%' },\n            color: 'black',\n            size: 200,\n            lockY: true\n        }\n        if (!controllers.left) {\n            let leftmanager = nipplejs.create(optionsleft);\n            leftmanager.on('move', (e, d) => {\n                let speed = Math.floor(d.vector.y * 255) + '';\n                y(speed);\n            });\n            leftmanager.on('end', () => socket.emit('y', 0));\n            controllers.left = leftmanager;\n        }\n    }\n    function setupRightNipple(root) {\n        const optionsright = {\n            zone: root || document.querySelector('.right'),\n            mode: 'dynamic',\n            position: { right: '25%', top: '50%' },\n            color: 'grey',\n            size: 200, lockX: true\n        }\n        if (!controllers.right) {\n            let rightmanager = nipplejs.create(optionsright);\n\n            rightmanager.on('move', (e, d) => {\n                let rad = Math.floor(d.vector.x * 255) + '';\n                x(rad);\n            });\n            rightmanager.on('end', () => socket.emit('x', 0));\n            controllers.right = rightmanager;\n        }\n\n    }\n\n\n    function wasdf() {\n        // Arrow key codes\n        const UP = 38,\n            DOWN = 40,\n            RIGHT = 39,\n            LEFT = 37,\n            SPACE = 32;\n        //wasd keycodes\n\n        const W = 87,\n            A = 65,\n            S = 83,\n            D = 68;\n\n        let maxyspeed = 200;\n        let maxxspeed = 140;\n        document.addEventListener('keydown', event => {\n            if ((event.keyCode === UP) || (event.keyCode === W)) {\n                if (!event.shiftKey) y(maxyspeed);\n                else y(255);\n\n            }\n            if ((event.keyCode === LEFT) || (event.keyCode === A)) {\n                x(-maxxspeed);\n\n            }\n            if ((event.keyCode === DOWN) || (event.keyCode === S)) {\n                if (!event.shiftKey) y(-maxyspeed);\n                else y(-255);\n\n            }\n            if ((event.keyCode === RIGHT) || (event.keyCode === D)) {\n                x(maxxspeed);\n\n            }\n        }, false);\n        document.addEventListener('keydown', event => {\n            if (event.keyCode === SPACE) {\n                maxxspeed = 255;\n            }\n        });\n        document.addEventListener('keyup', event => {\n            if (event.keyCode === SPACE) {\n                maxxspeed = 140;\n            }\n        })\n        document.addEventListener('keyup', event => {\n            if ((event.keyCode === UP) || (event.keyCode === W)) {\n                y('0');\n                console.log('left')\n            }\n            if ((event.keyCode === LEFT) || (event.keyCode === A)) {\n                x('0')\n            }\n            if ((event.keyCode === DOWN) || (event.keyCode === S)) {\n                y('0');\n            }\n            if ((event.keyCode === RIGHT) || (event.keyCode === D)) {\n                x('0');\n            }\n        }, false);\n\n\n    }\n\n    return {\n        setup: 0,\n        init: function (left, right) {\n\n            setupLeftNipple(left);\n            setupRightNipple(right);\n            wasdf();\n            this.setup = 1;\n\n\n        }\n    }\n\n}\n\nexport const Controller = () => {\n\n    setTheia = useContext(AuthContext)[3];\n    const auth = useContext(AuthContext)[0];\n    const theia = useContext(AuthContext)[2];\n    useEffect(() => {\n        const rem = remote();\n        try {\n            setTheia(window.THEIA);\n            rem.init();\n        } catch  { }\n    }, [auth]);\n\n    return (\n        <div className=\"controller\" style={{ display: theia ? '' : 'none' }}>\n            <div className=\"left\"></div><img className=\"feed\" alt=\"\" />\n            <div className=\"right\"></div>\n        </div>\n    )\n\n\n}\n\n\n\n\n\n","import React, { useState, createContext } from 'react'\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n    const authState = useState(true);\n    const theiaState = useState(false);\n    return (<AuthContext.Provider value={[...authState, ...theiaState]}>{children}</AuthContext.Provider>)\n}","import React, { useContext, useState } from 'react'\n\nimport Fullscreen from \"react-full-screen\";\nimport { AuthContext } from '../../contexts/AuthContext'\nimport { Controller } from './Controller'\n\nimport './css/controller.css'\nexport default function ControlPannel() {\n    const setAuth = useContext(AuthContext)[1];\n    const theiaState = useContext(AuthContext)[2];\n    const [full, setFull] = useState(false);\n    return (\n        <Fullscreen\n            enabled={full}\n            onChange={full => setFull(full)}>\n            <div className=\"control-pannel\">\n                <nav>\n                    <h1>theia <span style={{ color: theiaState ? 'skyblue' : 'var(--red-accent)' }}>is {theiaState ? 'online' : 'offline'}</span></h1>\n                    <ul>\n                        <li className=\"fullscr\" onClick={() => setFull(true)}>Fullscreen</li>\n                        <li onClick={() => setAuth(false)}>log out</li>\n                    </ul>\n                </nav>\n                \n                <Controller />\n            </div>\n\n        </Fullscreen>\n    );\n}","import React, { useContext, useEffect } from 'react';\nimport { AuthContext } from '../../contexts/AuthContext'\nimport './css/form.css'\nfunction Login() {\n    let pwd;\n    useEffect(() => {\n        document.querySelector('.login').style.transform = 'translateY(0px)';\n        document.querySelector('.login').style.opacity = '1';\n    })\n    const setAuth = useContext(AuthContext)[1];\n\n    const checker = () => {\n        if (pwd === 'olive') {\n            document.querySelector('.login').style.transform = 'translateY(-50px)';\n            document.querySelector('.login').style.opacity = '0';\n            setTimeout(setAuth, 400, true);\n        }\n    }\n    const handlePassword = (event) => {\n        pwd = event.target.value;\n        checker();\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        checker();\n    }\n    \n    return (\n        <div className=\"login\">\n            <h1>theia</h1>\n            <h2>Control Pannel</h2>\n            <form styel={{ width: 'auto' }} onSubmit={handleSubmit}>\n                <div className=\"text-ip\">\n                    <input onChange={handlePassword} autoComplete=\"off\" required type=\"password\" />\n                    <label><span>password</span></label>\n                </div>\n                <button style={{ height: 30, width: 60, paddingRight: 10, paddingLeft: 10 }} type=\"submit\">send</button>\n            </form>\n        </div>\n    );\n\n}\n\nexport default Login;","import React, { useContext } from 'react';\n\nimport ControlPannel from './components/ControlPannel/ControlPannel'\nimport Login from './components/ControlPannel/Login';\n\nimport { AuthContext } from './contexts/AuthContext';\n\nimport './App.css';\n\nfunction App() {\n  const auth = useContext(AuthContext)[0];\n  return (auth ? <ControlPannel /> : <Login />)\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { AuthProvider } from './contexts/AuthContext';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AuthProvider>\n      <App />\n    </AuthProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}